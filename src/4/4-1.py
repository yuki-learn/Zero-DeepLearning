import numpy as np

def mean_squared_error(y, t):
    """
    2乗和誤差
    """
    return 0.5 * np.sum((y-t) ** 2)


if __name__ == '__main__':
    # 前回の手書き文字の教師データを例として、「2」を正解ラベルとする。
    t = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
    
    # 推論した結果、「2」である確率が一番高い画像のニューラルネットワーク出力
    y1 = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]
    
    # 推論した結果、「7」である確率が一番高い画像のニューラルネットワーク出力
    y2 = [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6, 0.0, 0.0]
    
    # 損失関数に適用
    result1 = mean_squared_error(np.array(y1), np.array(t))
    result2 = mean_squared_error(np.array(y2), np.array(t))
    
    print(result1) # 0.09750000000000003
    print(result2) # 0.5975
    
    # 結果2より結果1のほうが損失関数の値が小さくなっている
    # -> 結果1のほうが教師データ「2」により適合していることを表している。
    